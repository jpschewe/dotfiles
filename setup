#!/bin/sh

debug() { ! "${log_debug-false}" || log "DEBUG: $*" >&2; }
log() { printf '%s\n' "$*"; }
warn() { log "WARNING: $*" >&2; }
error() { log "ERROR: $*" >&2; }
fatal() { error "$*"; exit 1; }

mydir=$(cd "$(dirname "$0")" && pwd -L) || fatal "Unable to determine script directory"

auto=0
while getopts a?h opt
do	case "${opt}" in
	a)	auto=1;;
	[?] | h)	fatal "Usage: ${0} [-a]";;
	esac
done
shift $((OPTIND-1))


# get git submodules
# Run a second time if there is an error. This happens when a new submodule is added.
git submodule sync >/dev/null
git submodule update --init >/dev/null || git submodule update --init >/dev/null

# setup hook scripts
for hook in post-applypatch post-commit post-merge pre-rebase; do
    ln -sf "${mydir}/hook-scripts/${hook}" "${mydir}/.git/hooks/${hook}"
done

# make sure that submodules are always fetched
git config --local fetch.recurseSubmodules yes

# setup bin
mkdir -p "${HOME}/bin"
for script in reattach-namespace; do
  ln -sf "${mydir}/bin/${script}" "${HOME}/bin/${script}"
done
ln -sf "${mydir}/lib/vcprompt/bin/vcprompt" "${HOME}/bin/vcprompt"

# bash
ln -sf "${mydir}/addpath" "${HOME}/.addpath"
ln -sf "${mydir}/bash_profile" "${HOME}/.bash_profile"
ln -sf "${mydir}/bash_logout" "${HOME}/.bash_logout"
ln -sf "${mydir}/bashrc" "${HOME}/.bashrc"
ln -sf "${mydir}/packages" "${HOME}/.packages"
ln -sf "${mydir}/tmux.conf" "${HOME}/.tmux.conf"
ln -sf "${mydir}/npmrc" "${HOME}/.npmrc"

# emacs
ln -sf "${mydir}/emacs.el" "${HOME}/.emacs"
if [ -L "${HOME}/.xemacs" ]; then
  rm -f "${HOME}/.xemacs"
  ln -sf "${mydir}/emacs" "${HOME}/.xemacs"
elif [ -f "${HOME}/.xemacs" ]; then
  if [ ${auto} -eq 0 ]; then
    log "Expecting ${HOME}/.xemacs to be a symlink or a directory, not a file, skipping"
  fi
elif [ -d "${HOME}/.xemacs" ]; then
  if [ ${auto} -eq 0 ]; then
    log "${HOME}/.xemacs already exists as a directory, moving to the side"
  fi
  mv "${HOME}/.xemacs" "${HOME}/.xemacs.old"
  ln -sf "${mydir}/emacs" "${HOME}/.xemacs"
else
  ln -sf "${mydir}/emacs" "${HOME}/.xemacs"
fi


# vim
ln -sf "${mydir}/vimrc" "${HOME}/.vimrc"
if [ -L "${HOME}/.vim" ]; then
  rm -f "${HOME}/.vim"
  ln -sf "${mydir}/vim" "${HOME}/.vim"
elif [ -f "${HOME}/.vim" ]; then
  if [ ${auto} -eq 0 ]; then
    log "Expecting ${HOME}/.vim to be a symlink or a directory, not a file, skipping"
  fi
elif [ -d "${HOME}/.vim" ]; then
  if [ ${auto} -eq 0 ]; then
    log "${HOME}/.vim already exists as a directory, moving to the side"
  fi
  mv "${HOME}/.vim" "${HOME}/.vim.old"
  ln -sf "${mydir}/vim" "${HOME}/.vim"
else
  ln -sf "${mydir}/vim" "${HOME}/.vim"
fi

# screen
ln -sf "${mydir}/screenrc" "${HOME}/.screenrc"

# subversion
mkdir -p "${HOME}/.subversion"
if [ -f "${HOME}/.subversion/config" ]; then
  /bin/mv "${HOME}/.subversion/config" "${HOME}/.subversion/config.old"
fi
ln -fs "${mydir}/subversion-config" "${HOME}/.subversion/config"

# cvs
ln -fs "${mydir}/cvsrc" "${HOME}/.cvsrc"

# tig
ln -sf "${mydir}/tigrc" "${HOME}/.tigrc"

# always link so that sssha-helper can be called from checkout when
# desired
ln -sf "${mydir}/sssha" "${HOME}/.ssh/sssha"
if [ ${auto} -eq 0 ]; then
  # ask about ssh
  printf "Would you like to have ssh-agent start up on login? (y/N) "
  answer=''
  read answer
  if [ "x${answer}" = "xy" ]; then
    mkdir -p "${HOME}/.ssh"
    ln -sf "${mydir}/sssha-helper" "${HOME}/.ssh/sssha-helper"
  else
    rm -f "${HOME}/.ssh/sssha-helper"
  fi
fi

"${mydir}"/hook-scripts/setup-gitconfig

# make sure that ssh directory is setup correctly
try mkdir -p "${HOME}"/.ssh/sockets
try chmod go-rwx "${HOME}"/.ssh
